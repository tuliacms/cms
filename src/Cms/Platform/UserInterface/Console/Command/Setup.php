<?php

declare(strict_types=1);

namespace Tulia\Cms\Platform\UserInterface\Console\Command;

use Doctrine\DBAL\Connection;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\Question;
use Symfony\Component\Console\Style\SymfonyStyle;
use Tulia\Cms\Options\Application\Service\WebsitesOptionsRegistrator;
use Tulia\Cms\Options\Domain\WriteModel\OptionsRepositoryInterface;
use Tulia\Cms\Shared\Domain\WriteModel\UuidGeneratorInterface;
use Tulia\Cms\Theme\Application\Service\ThemeActivator;
use Tulia\Cms\User\Application\UseCase\CreateUser;
use Tulia\Cms\User\Application\UseCase\CreateUserRequest;
use Tulia\Cms\Website\Application\UseCase\UpdateWebsite;
use Tulia\Cms\Website\Application\UseCase\UpdateWebsiteRequest;
use Tulia\Component\Importer\ImporterInterface;

/**
 * @author Adam Banaszkiewicz
 */
class Setup extends Command
{
    protected static $defaultName = 'cms:setup';

    public function __construct(
        private readonly string $rootDir,
        private readonly string $cmsCoreDir,
        private readonly UuidGeneratorInterface $uuidGenerator,
        private readonly CreateUser $createUser,
        private readonly WebsitesOptionsRegistrator $optionsRegistrator,
        private readonly OptionsRepositoryInterface $optionsRepository,
        private readonly UpdateWebsite $updateWebsite,
        private readonly Connection $connection,
        private readonly ThemeActivator $themeActivator,
        private readonly ImporterInterface $importer,
    ) {
        parent::__construct();
    }

    protected function configure()
    {
        $this->setDescription('Setups the new project.');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);

        $io->writeln(<<<EOF
<fg=#0088cc>
████████╗██╗   ██╗██╗     ██╗ █████╗      ██████╗███╗   ███╗███████╗
╚══██╔══╝██║   ██║██║     ██║██╔══██╗    ██╔════╝████╗ ████║██╔════╝
   ██║   ██║   ██║██║     ██║███████║    ██║     ██╔████╔██║███████╗
   ██║   ██║   ██║██║     ██║██╔══██║    ██║     ██║╚██╔╝██║╚════██║
   ██║   ╚██████╔╝███████╗██║██║  ██║    ╚██████╗██║ ╚═╝ ██║███████║
   ╚═╝    ╚═════╝ ╚══════╝╚═╝╚═╝  ╚═╝     ╚═════╝╚═╝     ╚═╝╚══════╝
</>
              Welcome in the World of Tulia CMS!

EOF
);

        $io->writeln('<comment>Now, answer some questions to initialize Your Tulia CMS installation.</comment>');

        $websiteName = $this->askFor('Website name', $input, $output);
        $websiteLocale = $this->askFor('Website locale', $input, $output, default: 'en_US');
        $websiteProductionDomain = $this->askFor('Website production domain', $input, $output, default: 'localhost');

        $username = $this->askFor('Admin email', $input, $output, validator: static function ($answer) {
            if (!filter_var($answer, FILTER_VALIDATE_EMAIL)) {
                throw new \RuntimeException('Please provide a valid e-mail address.');
            }
        });
        $password = $this->askFor('Admin password', $input, $output, default: 'root', hidden: true);
        $sampleData = $this->askFor('I want to load sample website data', $input, $output, default: 'yes');

        $websiteId = $this->getWebsiteId();
        $this->updateOptions($websiteId, $websiteLocale, $username);
        $this->updateWebsite($websiteId, $websiteName, $websiteLocale, $websiteProductionDomain);
        $this->updateTheme($websiteId);
        //$this->createAdminUser($username, $password);

        if ($sampleData) {
            $this->authenticateUser($username, $password);
            $this->importSampleData();
        }

        if (!($_ENV['APP_SECRET'] ?? null)) {
            $secret = $this->uuidGenerator->generate();
            $this->appendToDotenv('APP_SECRET', $secret);

            $output->writeln(sprintf('<info>Autogenerated APP_SECRET is %s.</info>', $secret));
        }

        $output->writeln('<info>Tulia CMS installed. Go to http://localhost/ to start new adventure!</info>');

        return Command::SUCCESS;
    }

    private function appendToDotenv(string $variable, string $value): void
    {
        $lines = file($this->rootDir.'/.env');
        $found = false;

        foreach ($lines as $no => $line) {
            if (strpos($line, "$variable=") === 0) {
                $lines[$no] = "$variable=$value\n";
                $found = true;
            }
        }

        if ($found === false) {
            $lines[] = "$variable=$value\n";
        }

        file_put_contents($this->rootDir.'/.env', implode('', $lines));
    }

    private function askFor(
        string $questionMessage,
        InputInterface $input,
        OutputInterface $output,
        callable $validator = null,
        mixed $default = '',
        bool $required = true,
        bool $hidden = false,
    ): string {
        if ($default) {
            $defaultValue = sprintf(' <fg=#eeeeee>(%s)</>', $default);
        } else {
            $defaultValue = '';
        }

        $question = new Question(sprintf('%s%s: ', $questionMessage, $defaultValue), $default);
        $question->setHidden($hidden);
        $question->setValidator(function ($answer) use ($questionMessage, $required, $validator) {
            if ($required && empty($answer)) {
                throw new \RuntimeException(sprintf('Please provide a %s.', strtolower($questionMessage)));
            }

            if (is_callable($validator)) {
                $validator($answer);
            }

            return $answer;
        });
        return $this->getHelper('question')->ask($input, $output, $question);
    }

    private function updateWebsite(string $websiteId, string $name, string $locale, string $domain): void
    {
        ($this->updateWebsite)(new UpdateWebsiteRequest(
            $websiteId,
            $name,
            true,
            [[
                'code' => $locale,
                'domain' => $domain,
                'domain_development' => $domain,
            ]]
        ));
    }

    private function createAdminUser(string $username, string $password): void
    {
        ($this->createUser)(new CreateUserRequest(
            $username,
            $password,
            ['ROLE_ADMIN']
        ));
    }

    private function updateOptions(string $websiteId, string $locale, string $username): void
    {
        $this->optionsRegistrator->registerMissingOptions($websiteId);

        $option = $this->optionsRepository->get('administrator_email', $websiteId);
        $option->setValue($username, $locale, $locale);
        $this->optionsRepository->save($option);
    }

    private function getWebsiteId(): string
    {
        return $this->connection->fetchOne('SELECT id from #__website');
    }

    private function updateTheme(string $websiteId): void
    {
        $this->themeActivator->activateTheme('Tulia/Lisa', $websiteId);
    }

    private function importSampleData(): void
    {
        $this->importer->importFromFile($this->cmsCoreDir.'/Cms/Platform/Infrastructure/Framework/Resources/imports/sample-website-data.json');
    }

    private function authenticateUser(string $username, string $password): void
    {
    }
}
